diff U3 a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
--- a/es-app/src/guis/GuiMenu.cpp	Thu Jun 08 07:58:22 2017
+++ b/es-app/src/guis/GuiMenu.cpp	Thu Jun 08 16:55:16 2017
@@ -21,6 +21,7 @@
 {
 	bool isFullUI = UIModeController::getInstance()->isUIModeFull();
 
+		addEntry("Sx05RE", 0x777777FF, true, [this] { openSx05RESettings(); });
 	if (isFullUI)
 		addEntry("SCRAPER", 0x777777FF, true, [this] { openScraperSettings(); });
 
@@ -48,6 +49,73 @@
 	setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, Renderer::getScreenHeight() * 0.15f);
 }
 
+void GuiMenu::openSx05RESettings()
+{
+	auto s = new GuiSettings(mWindow, "Sx05RE Settings");
+	
+	Window* window = mWindow;
+	ComponentListRow row;
+
+			row.makeAcceptInputHandler([window] {
+				window->pushGui(new GuiMsgBox(window, "QUIT TO KODI? ", "YES",
+					[] {
+					remove("/var/lock/start.games");
+            		runSystemCommand("touch /var/lock/start.kodi");
+			        runSystemCommand("systemctl start kodi.service");
+					SDL_Event ev;
+					ev.type = SDL_QUIT;
+					SDL_PushEvent(&ev);
+				}, "NO", nullptr));
+			});
+			row.addElement(std::make_shared<TextComponent>(window, "START KODI", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+			s->addRow(row);
+
+			row.elements.clear();
+			row.makeAcceptInputHandler([window] {
+				window->pushGui(new GuiMsgBox(window, "QUIT TO RETROARCH? ", "YES",
+					[] {
+					remove("/var/lock/start.games");
+            		runSystemCommand("touch /var/lock/start.retro");
+			        runSystemCommand("systemctl start retroarch.service");
+					SDL_Event ev;
+					ev.type = SDL_QUIT;
+					SDL_PushEvent(&ev);
+				}, "NO", nullptr));
+			});
+			row.addElement(std::make_shared<TextComponent>(window, "START RETROARCH", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+			s->addRow(row);
+			
+auto sx05re_boot_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "START AT BOOT", false);
+		std::vector<std::string> devices;
+		devices.push_back("Emulationstation");
+		devices.push_back("Kodi");
+		devices.push_back("Retroarch");
+		for (auto it = devices.cbegin(); it != devices.cend(); it++)
+		sx05re_boot_def->add(*it, *it, Settings::getInstance()->getString("Sx05RE_BOOT") == *it);
+		s->addWithLabel("START AT BOOT", sx05re_boot_def);
+		s->addSaveFunc([sx05re_boot_def] {
+			runSystemCommand("echo "+sx05re_boot_def->getSelected()+" > /storage/.config/def_fe");
+			if (Settings::getInstance()->getString("Sx05RE_BOOT") != sx05re_boot_def->getSelected())
+				Settings::getInstance()->setString("Sx05RE_BOOT", sx05re_boot_def->getSelected());
+		});
+					
+
+	row.elements.clear();
+	if (UIModeController::getInstance()->isUIModeFull())
+	{
+	row.makeAcceptInputHandler([window] {
+		window->pushGui(new GuiMsgBox(window, "!!!!!!WARNING!!!!!!!!!! RESET Sx05RE/KODI TO DEFAULT CONFIG AND RESTART?", "YES",
+				[] { 
+				runSystemCommand("/usr/bin/clearconfig.sh");
+				}, "NO", nullptr));
+	});
+	row.addElement(std::make_shared<TextComponent>(window, "RESET DEFAULT CONFIG", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+	s->addRow(row);
+
+	mWindow->pushGui(s);
+ }
+}
+
 void GuiMenu::openScraperSettings()
 {
 	auto s = new GuiSettings(mWindow, "SCRAPER");
@@ -95,13 +163,15 @@
 
 	if (UIModeController::getInstance()->isUIModeFull())
 	{
-#ifdef _RPI_
+
 		// volume control device
 		auto vol_dev = std::make_shared< OptionListComponent<std::string> >(mWindow, "AUDIO DEVICE", false);
 		std::vector<std::string> transitions;
 		transitions.push_back("PCM");
 		transitions.push_back("Speaker");
 		transitions.push_back("Master");
+		transitions.push_back("AMLM8AUDIO");
+		transitions.push_back("AML-M8AUDIO");
 		for(auto it = transitions.cbegin(); it != transitions.cend(); it++)
 			vol_dev->add(*it, *it, Settings::getInstance()->getString("AudioDevice") == *it);
 		s->addWithLabel("AUDIO DEVICE", vol_dev);
@@ -110,7 +180,6 @@
 			VolumeControl::getInstance()->deinit();
 			VolumeControl::getInstance()->init();
 		});
-#endif
 
 		// disable sounds
 		auto sounds_enabled = std::make_shared<SwitchComponent>(mWindow);
@@ -408,55 +477,36 @@
 	Window* window = mWindow;
 
 	ComponentListRow row;
-	if (UIModeController::getInstance()->isUIModeFull())
-	{
+
 		row.makeAcceptInputHandler([window] {
 			window->pushGui(new GuiMsgBox(window, "REALLY RESTART?", "YES",
 				[] {
-				if(quitES("/tmp/es-restart") != 0)
-					LOG(LogWarning) << "Restart terminated with non-zero result!";
+    		   runSystemCommand("systemctl restart emustation.service");
 			}, "NO", nullptr));
 		});
 		row.addElement(std::make_shared<TextComponent>(window, "RESTART EMULATIONSTATION", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
 		s->addRow(row);
 
-
-
-		if(Settings::getInstance()->getBool("ShowExit"))
-		{
-			row.elements.clear();
-			row.makeAcceptInputHandler([window] {
-				window->pushGui(new GuiMsgBox(window, "REALLY QUIT?", "YES",
-					[] {
-					SDL_Event ev;
-					ev.type = SDL_QUIT;
-					SDL_PushEvent(&ev);
-				}, "NO", nullptr));
-			});
-			row.addElement(std::make_shared<TextComponent>(window, "QUIT EMULATIONSTATION", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
-			s->addRow(row);
-		}
-	}
 	row.elements.clear();
 	row.makeAcceptInputHandler([window] {
 		window->pushGui(new GuiMsgBox(window, "REALLY RESTART?", "YES",
 			[] {
-			if (quitES("/tmp/es-sysrestart") != 0)
+			if (system("systemctl reboot") != 0)
 				LOG(LogWarning) << "Restart terminated with non-zero result!";
 		}, "NO", nullptr));
 	});
-	row.addElement(std::make_shared<TextComponent>(window, "RESTART SYSTEM", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+	row.addElement(std::make_shared<TextComponent>(window, "RESTART Sx05RE", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
 	s->addRow(row);
 
 	row.elements.clear();
 	row.makeAcceptInputHandler([window] {
 		window->pushGui(new GuiMsgBox(window, "REALLY SHUTDOWN?", "YES",
 			[] {
-			if (quitES("/tmp/es-shutdown") != 0)
+			if (system("systemctl poweroff") != 0)
 				LOG(LogWarning) << "Shutdown terminated with non-zero result!";
 		}, "NO", nullptr));
 	});
-	row.addElement(std::make_shared<TextComponent>(window, "SHUTDOWN SYSTEM", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+	row.addElement(std::make_shared<TextComponent>(window, "SHUTDOWN Sx05RE", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
 	s->addRow(row);
 
 	mWindow->pushGui(s);
@@ -468,7 +518,7 @@
 
 	mVersion.setFont(Font::get(FONT_SIZE_SMALL));
 	mVersion.setColor(0x5E5E5EFF);
-	mVersion.setText("EMULATIONSTATION V" + Utils::String::toUpper(PROGRAM_VERSION_STRING) + buildDate);
+	mVersion.setText("EMULATIONSTATION V" + Utils::String::toUpper(PROGRAM_VERSION_STRING) + buildDate +" SX05RE v1.8.4");
 	mVersion.setHorizontalAlignment(ALIGN_CENTER);
 	addChild(&mVersion);
 }
--- a/es-app/src/guis/GuiMenu.h	2018-03-09 12:11:38.000000000 -0600
+++ b/es-app/src/guis/GuiMenu.h	2018-03-16 01:20:44.411257304 -0600
@@ -26,6 +26,7 @@
 	void openScreensaverOptions();
 	void openSoundSettings();
 	void openUISettings();
+	void openSx05RESettings();
 
 	MenuComponent mMenu;
 	TextComponent mVersion;
--- a/es-app/src/VolumeControl.cpp	2018-03-09 12:11:38.000000000 -0600
+++ b/es-app/src/VolumeControl.cpp	2018-03-16 17:43:59.431463781 -0600
@@ -86,9 +86,9 @@
 	//try to open mixer device
 	if (mixerHandle == nullptr)
 	{
-		#ifdef _RPI_
+	//	
 		mixerName = Settings::getInstance()->getString("AudioDevice").c_str();
-		#endif
+	//	
 
 		snd_mixer_selem_id_alloca(&mixerSelemId);
 		//sets simple-mixer index and name

